#include "std_testcase.h"

#include <wchar.h>

#ifdef _WIN32
#define FULL_COMMAND L"dir "
#else
#include <unistd.h>
#define FULL_COMMAND L"ls "
#endif

#ifdef _WIN32
#define SYSTEM _wsystem
#else
#define SYSTEM system
#endif

#ifndef OMITBAD

static wchar_t * badSource(wchar_t * data)
{
    {
        size_t dataLen = wcslen(data);
        if (100-dataLen > 1)
        {
            if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                dataLen = wcslen(data);
                if (dataLen > 0 && data[dataLen-1] == L'
')
                {
                    data[dataLen-1] = L'';
                }
            }
            else
            {
                printLine("fgetws() failed");
                data[dataLen] = L'';
            }
        }
    }
    return data;
}

void CWE78_OS_Command_Injection__wchar_t_console_system_42_bad()
{
    wchar_t * data;
    wchar_t data_buf[100] = FULL_COMMAND;
    data = data_buf;
    data = badSource(data);
    if (SYSTEM(data) != 0)
    {
        printLine("command execution failed!");
        exit(1);
    }
}

#endif

#ifdef INCLUDEMAIN

int main(int argc, char * argv[])
{
    srand( (unsigned)time(NULL) );
#ifndef OMITBAD
    printLine("Calling bad()...");
    CWE78_OS_Command_Injection__wchar_t_console_system_42_bad();
    printLine("Finished bad()");
#endif
    return 0;
}

#endif